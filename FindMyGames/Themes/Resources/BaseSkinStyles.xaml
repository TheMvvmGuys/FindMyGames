<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:ui="clr-namespace:TheMvvmGuys.FindMyGames.UI">

    <Style TargetType="{x:Type TextBlock}" x:Key="ForegroundColorControlStyle">
        <Setter Property="Foreground" Value="{DynamicResource WindowForegroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type Control}" x:Key="ColoredWindowStyle">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource WindowForegroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type Window}" BasedOn="{StaticResource ColoredWindowStyle}"/>
    <Style TargetType="{x:Type Frame}" BasedOn="{StaticResource ColoredWindowStyle}"/>
    <Style TargetType="{x:Type Page}">
        <Setter Property="Foreground" Value="{DynamicResource WindowForegroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource ForegroundColorControlStyle}"/>
    <Style TargetType="{x:Type TextBlock}" x:Key="HeaderTextStyle" BasedOn="{StaticResource ForegroundColorControlStyle}">
        <Setter Property="FontSize" Value="34"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>
    <Style TargetType="{x:Type TextBlock}" x:Key="SubtitleTextStyle" BasedOn="{StaticResource HeaderTextStyle}">
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
    </Style>
    <!-- Templates & stuff -->
    <ControlTemplate x:Key="ColoredButtonTemplate" TargetType="{x:Type Button}">
        <Grid x:Name="Grid">
            <Grid.Resources>
                <Storyboard FillBehavior="HoldEnd" x:Key="HoveredStoryboard">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="border">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1.00"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="{Binding Path=(ui:ButtonAnimation.ScaleUp), RelativeSource={RelativeSource TemplatedParent}}"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="border">
                        <EasingDoubleKeyFrame KeyTime="0" Value="1.00"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="{Binding Path=(ui:ButtonAnimation.ScaleUp), RelativeSource={RelativeSource TemplatedParent}}"/>
                    </DoubleAnimationUsingKeyFrames>
                </Storyboard>
            </Grid.Resources>
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
                RenderTransformOrigin="0.5, 0.5"
                SnapsToDevicePixels="True">
                <Border.RenderTransform>
                    <ScaleTransform CenterX="0" CenterY="0" ScaleX="1" ScaleY="1"/>
                </Border.RenderTransform>
                <Border.Effect>
                    <DropShadowEffect BlurRadius="10" ShadowDepth="0" Opacity="0.5" Color="{DynamicResource ButtonShadowColor}" RenderingBias="Quality"/>
                </Border.Effect>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseEnter">
                        <b:GoToStateAction StateName="Hovered" TargetName="Grid"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="MouseLeave">
                        <b:GoToStateAction StateName="Normal" TargetName="Grid"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0">
                            <VisualTransition.GeneratedEasingFunction>
                                <QuinticEase EasingMode="EaseInOut"/>
                            </VisualTransition.GeneratedEasingFunction>
                        </VisualTransition>
                        <VisualTransition From="Hovered" GeneratedDuration="0:0:0.2" To="Normal">
                            <VisualTransition.GeneratedEasingFunction>
                                <CircleEase EasingMode="EaseIn"/>
                            </VisualTransition.GeneratedEasingFunction>
                        </VisualTransition>
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Hovered" Storyboard="{StaticResource HoveredStoryboard}"/>
                    <VisualState x:Name="Normal"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlFocusedBackgroundBrush}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlFocusedBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlClickedBackgroundBrush}"/>
                <!--<Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>-->
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlFocusedBackgroundBrush}"/>
                <!--<Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>-->
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="{DynamicResource ControlDisabledBackgroundBrush}"/>
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlDisabledBorderBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Control}" x:Key="ColoredInteractiveControlStyle">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource ControlDisabledBackgroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Control}" x:Key="ColoredContainerStyle" BasedOn="{StaticResource ColoredInteractiveControlStyle}">
        <Setter Property="Background" Value="{DynamicResource ContainerControlBackgroundBrush}"/>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ColoredButtonStyle" BasedOn="{StaticResource ColoredInteractiveControlStyle}">
        <Setter Property="Template" Value="{StaticResource ColoredButtonTemplate}"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ColoredButtonStyle}"/>
    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource ColoredContainerStyle}"/>
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ColoredInteractiveControlStyle}"/>
    <Thickness Bottom="15" Top="15" Left="25" Right="25" x:Key="FirstStartupPageMargin"/>
</ResourceDictionary>